# COMBINED CODE FILES FROM C:\Users\okthe\Code\Uni\year 2\2064\web_pages
# Generated on 2025-05-11 00:40:37


================================================================================
# FILE: app.py
================================================================================

'''
Main app
'''

from io import BytesIO
import base64
from queue import Queue, Empty
import time
from socket import socket, AF_INET, SOCK_DGRAM
from flask import Flask, render_template as goto_page, request, jsonify
from flask_cors import CORS
import qrcode
import qrcode.constants
from mqtt import MqttManager
from multithread_datatypes import ThreadsafeRoomList as RoomList
import common
from common import User, MqttTopic, Topics

def get_ip_address() -> str:
    '''Get the current IP address of the Pi'''
    s = socket(AF_INET, SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        return s.getsockname()[0]
    except OSError:
        return "127.0.0.1"
    finally:
        s.close()


# Global consts
PORT = 5002
IP = get_ip_address()
QR_CODE_URL = f"http://{IP}:{PORT}/register"  # The URL the QR code will point to

app = Flask(__name__)
CORS(app)  # Enable CORS - Allows cross-origin requests

TOPICS = Topics(
    MqttTopic("staff","hospital/gp/available"), # Alerts of GP avaliability
    MqttTopic("user","hospital/patient/register"), # Alerts of user registration
    MqttTopic("robot","hospital/robot/task") # Posts here to send instructions to the robot
)
user_queue = Queue()
room_list = RoomList()
mqtt = MqttManager(user_queue, room_list, TOPICS)


def generate_qr_code():
    '''Generate a QR code image and return as base64 string'''
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(QR_CODE_URL)
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")
    buffered = BytesIO()
    img.save(buffered)
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return img_str


@app.route("/")
def index():
    '''Main page displaying the QR code'''
    #return goto_page("index.html", qr_code_image=generate_qr_code())
    display()


@app.route("/display")
def display():
    '''Page to be displayed on the Pi's connected screen'''
    return goto_page("display.html", qr_code_image=generate_qr_code())


@app.route("/register")
def register():
    '''Form for users to enter their information'''
    page = "register"
    return goto_page(f"{page}.html", page=page)


@app.route("/staff-login")
def staff_login():
    '''Login page for staff'''
    page = "staff-login"
    return goto_page(f"{page}.html", page=page)


@app.route("/submit-register", methods=["POST"])
def submit_register():
    '''Endpoint to receive user information and add to queue'''
    # Create user object
    user = User(request.form.get("name"), request.form.get("dob"), time.time())

    # Add to the queue
    mqtt.post_user(user)
    queue_position = user_queue.qsize()

    print(f"Added user to queue: {user.name}, position estimate: {queue_position}")
    return goto_page("success.html")


@app.route("/submit-staff-login", methods=["POST"])
def submit_staff_login():
    '''Endpoint for staff login'''
    staff_id = request.form.get("name")
    room:int = request.form.get("room")

    # Add room to avaliable rooms list
    room_list.add_room(room)

    print(f"Staff login attempt: {staff_id}")
    return goto_page("staff-dashboard.html", queue=user_queue)


@app.route("/generate-qr", methods=["GET"])
def generate_qr_api():
    '''API endpoint to get QR code image data'''
    qr_code_image = generate_qr_code()
    return jsonify({"qr_code": qr_code_image})


if __name__ == "__main__":
    # Start Flask app
    print(f"Server running at http://{IP}:{PORT}/")
    app.run(host="0.0.0.0", port=PORT, debug=True)



================================================================================
# FILE: common.py
================================================================================

'''
Common code for other files
'''

from dataclasses import dataclass

@dataclass
class User:
    '''Dataclass for users'''
    name:str
    dob:str
    register_time:float

@dataclass
class MqttTopic:
    '''Dataclass for topics'''
    name:str
    topic:str

@dataclass
class Topics:
    '''MQTT Topics'''
    staff:MqttTopic
    user:MqttTopic
    robot:MqttTopic



================================================================================
# FILE: mqtt.py
================================================================================

'''
MQTT related code
'''

import json
from queue import Queue
from paho.mqtt.client import Client as MQTTClient, MQTTMessage
from multithread_datatypes import ThreadsafeRoomList as RoomList
from common import User, Topics


class MqttManager:
    '''Manages MQTT requests for IoT'''
    BROKER = "localhost"
    PORT = 1883

    def __init__(self, user_queue:Queue, room_list:RoomList, topics:Topics) -> None:
        self.user_queue = user_queue
        self.room_list = room_list
        self.topics = topics

        # Setup client
        client = MQTTClient()
        client.on_connect = self.on_connect
        client.on_message = self.on_message

        # Connect to broker
        client.connect(self.BROKER, self.PORT)
        client.loop_start()  # Start background thread for MQTT
        self.client = client
        print("MQTT client started")

    def process_gp_available(self, payload: dict) -> None:
        '''Process a GP availability message'''
        # Example: {room:3, ready:True}
        if "room" in payload and payload.get("ready", False):
            room_number = payload["room"]
            print(f"GP available in room {room_number}.")

            # Wait for a user
            print(f"Waiting for user... ({room_number})")
            user:User = self.user_queue.get()
            print(f"Please can {user.name} proceed to room {room_number}. The robot will escort you.")
            self.post_robot(user.name, room_number)

    def process_user_register(self, payload:dict) -> None:
        '''Process a user signup message'''
        # Example: {name:"Bob", dob:"2001-03-20", time:98765.4}
        user = User(payload["name"], payload["dob"], payload["time"])
        # Add the user to the queue
        self.user_queue.put(user)
        # No more logic is needed as process_gp_available manages matching users and gps

    def post_robot(self, name:str, room:int) -> None:
        '''Sends a message to the robot via MQTT'''
        data = {
            "action": "collect_user",
            "user_name": name,
            "room": room,
        }
        self.client.publish(self.topics.robot.topic, json.dumps(data))

    def post_user(self, user:User) -> None:
        '''Posts to the user topic'''
        data = {
            "name": user.name,
            "dob": user.dob,
            "time": user.register_time
        }
        self.client.publish(self.topics.user.topic, json.dumps(data))

    def on_connect(self, client:MQTTClient, _userdata, _flags, rc:int) -> None:
        '''Callback when connecting'''
        print(f"Connected to MQTT broker with result code {rc}")
        client.subscribe(self.topics.staff.topic)
        print(f"Subscribed to {self.topics.staff.topic}")

    def on_message(self, _client, _userdata, msg:MQTTMessage):
        '''Callback when receiving a message'''
        try:
            payload = json.loads(msg.payload.decode())  # Converts JSON to dict
            # Datermine whether the message is from a room or from a user
            match msg.topic:
                case self.topics.staff.topic:
                    return self.process_gp_available(payload)
                case self.topics.user.topic:
                    return self.process_user_register(payload)
                case _:
                    raise ValueError(f"Unexpected topic: {msg.topic}")

        except json.JSONDecodeError:
            print(f"Error decoding MQTT message: {msg.payload}")



================================================================================
# FILE: multithread_datatypes.py
================================================================================

'''
Implements thread-safe data types.
'''

import threading

class ThreadsafeRoomList:
    '''Thread-safe list for staff rooms'''
    def __init__(self) -> None:
        self._rooms = []
        self._lock = threading.Lock()

    def add_room(self, room_number) -> None:
        '''Add a room to the list'''
        with self._lock:
            self._rooms.append(room_number)

    def get_next_room(self) -> int:
        '''Get the next room from the front'''
        with self._lock:
            if not self._rooms:
                return None
            return self._rooms.pop(0)

    def remove_room(self, room_number) -> bool:
        '''Remove a specific room if it exists in the list'''
        with self._lock:
            if room_number in self._rooms:
                self._rooms.remove(room_number)
                return True
            return False

    def is_empty(self) -> bool:
        '''Check if the list is empty'''
        with self._lock:
            return len(self._rooms) == 0

    def size(self) -> bool:
        '''Get the current size of the list'''
        with self._lock:
            return len(self._rooms)

    def peek(self) -> int:
        '''View the next room without removing it'''
        with self._lock:
            if not self._rooms:
                return None
            return self._rooms[0]

    def contains(self, room_number) -> bool:
        '''Check if a room exists in the list'''
        with self._lock:
            return room_number in self._rooms



================================================================================
# FILE: static\css\styles.css
================================================================================

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f8f9fa;
    text-align: center;
}
.container {
    text-align: center;
    padding: 20px;
    margin: 40px auto;
    background-color: white;
    border-radius: 10px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    width: 90%;
}
h1 {
    color: #2c3e50;
    margin-bottom: 10px;
}
p {
    color: #7f8c8d;
    margin-bottom: 20px;
    font-size: 18px;
}
.qr-container {
    margin: 20px auto;
    max-width: 300px;
}
.error-icon {
    color: #e74c3c;
    font-size: 80px;
    line-height: 1;
    margin-bottom: 20px;
}
img {
    max-width: 100%;
}
a {
    display: inline-block;
    margin-top: 20px;
    color: #3498db;
    text-decoration: none;
}
a:hover {
    text-decoration: underline;
}
button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
}
button:hover {
    background-color: #2980b9;
}
form {
    display: flex;
    flex-direction: column;
}
label {
    margin-top: 15px;
    margin-bottom: 5px;
    font-weight: bold;
    color: #34495e;
}
input, textarea {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
}
.checkmark {
    color: #27ae60;
    font-size: 80px;
    line-height: 1;
    margin-bottom: 20px;
}



================================================================================
# FILE: static\js\script.js
================================================================================




================================================================================
# FILE: templates\error.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error</title>
    <link rel="stylesheet" href="{{ url_for('static', filename= 'css/styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="error-icon">⚠</div>
        <h1>System Error</h1>
        <p>{{ error }}</p>
        <p>Please speak to a receptionist for assistance.</p>
        <button onclick="window.location.href='/register'">Try Again</button>
    </div>
</body>
</html>



================================================================================
# FILE: templates\index.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scan to Register</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="container">
        <h1>Welcome to Our GP Practice</h1>
        <p>Scan this QR code to add yourself to the waiting list</p>
        <div class="qr-code">
            <img src="data:image/png;base64,{{ qr_code_image }}" alt="QR Code">
        </div>
        <p>Our robot assistant will guide you to your appointment when it's your turn</p>
    </div>
</body>
</html>



================================================================================
# FILE: templates\register.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register for Appointment</title>
    <link rel="stylesheet" href="{{ url_for('static', filename= 'css/styles.css') }}">
</head>
<body>
    <div class="container">
        <h1>Appointment Checkin</h1>
        <form action="/submit-register" method="POST">
            <label for="name">Your Name:</label>
            <input type="text" id="name" name="name" required>
            
            <label for="dob">Date of Birth:</label>
            <input type="date" id="dob" name="dob">
            
            <button type="submit">Register</button>
        </form>
    </div>
</body>
</html>



================================================================================
# FILE: templates\staff-dashboard.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staff Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <style>
        .queue-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .queue-table th, .queue-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .queue-table th {
            background-color: #f2f2f2;
        }
        .queue-controls {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Staff Dashboard</h1>
        <p>Current Patient Queue</p>
        
        {% if queue %}
        <table class="queue-table">
            <thead>
                <tr>
                    <th>Position</th>
                    <th>Name</th>
                    <th>Date of Birth</th>
                </tr>
            </thead>
            <tbody>
                {% for patient in queue %}
                <tr>
                    <td>{{ loop.index }}</td>
                    <td>{{ patient.name }}</td>
                    <td>{{ patient.dob }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>The queue is currently empty.</p>
        {% endif %}
        
        <div class="queue-controls">
            <button onclick="notifyGPAvailable()">Notify GP Available</button>
            <button onclick="window.location.href='/'">Back to Home</button>
        </div>
    </div>
    
    <script>
        function notifyGPAvailable() {
            // This would typically send an MQTT message in a real system
            // For this example, we'll use a simpler approach with a form submission
            fetch('/notify-gp-available', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    room: prompt("Enter room number:", "1")
                }),
            })
            .then(response => response.json())
            .then(data => {
                if(data.success) {
                    alert(`Notified next patient for room ${data.room}`);
                    // Reload to update the queue display
                    location.reload();
                } else {
                    alert(data.message || "Error notifying GP available");
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("Error notifying GP available");
            });
        }
    </script>
</body>
</html>


================================================================================
# FILE: templates\staff-login.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staff Login</title>
    <link rel="stylesheet" href="{{ url_for('static', filename= 'css/styles.css') }}">
</head>
<body>
    <div class="container">
        <h1>Staff Login</h1>
        <form action="/submit-staff-login" method="POST">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>

            <label for="room">Room Number:</label>
            <input type="number" id="room" name="room" min="1" required>
            
            <button type="submit">Register</button>
        </form>
    </div>
</body>
</html>



================================================================================
# FILE: templates\success.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Successful</title>
    <link rel="stylesheet" href="{{ url_for('static', filename= 'css/styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="checkmark">✓</div>
        <h1>Registration Successful</h1>
        <p>You have been added to the waiting list.</p>
        <p>Our robot assistant will come to guide you to your appointment when it's your turn.</p>
        <p>Please remain in the waiting area.</p>
    </div>
</body>
</html>



================================================================================
# SUMMARY: Combined 12 files (skipped 0)
================================================================================
