// Generated by gencpp from file lodestone/State.msg
// DO NOT EDIT!


#ifndef LODESTONE_MESSAGE_STATE_H
#define LODESTONE_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lodestone
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : header()
    , state_code(0)
    , state_name()
    , status_code(0)
    , status_name()
    , patients()
    , free_gps()  {
    }
  State_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state_code(0)
    , state_name(_alloc)
    , status_code(0)
    , status_name(_alloc)
    , patients(_alloc)
    , free_gps(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _state_code_type;
  _state_code_type state_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_name_type;
  _state_name_type state_name;

   typedef int8_t _status_code_type;
  _status_code_type status_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_name_type;
  _status_name_type status_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _patients_type;
  _patients_type patients;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _free_gps_type;
  _free_gps_type free_gps;





  typedef boost::shared_ptr< ::lodestone::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lodestone::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::lodestone::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::lodestone::State > StatePtr;
typedef boost::shared_ptr< ::lodestone::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lodestone::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lodestone::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lodestone::State_<ContainerAllocator1> & lhs, const ::lodestone::State_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state_code == rhs.state_code &&
    lhs.state_name == rhs.state_name &&
    lhs.status_code == rhs.status_code &&
    lhs.status_name == rhs.status_name &&
    lhs.patients == rhs.patients &&
    lhs.free_gps == rhs.free_gps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lodestone::State_<ContainerAllocator1> & lhs, const ::lodestone::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lodestone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lodestone::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lodestone::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lodestone::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lodestone::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lodestone::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lodestone::State_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lodestone::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e3672c940da58e350b2feda44bddd06";
  }

  static const char* value(const ::lodestone::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e3672c940da58e3ULL;
  static const uint64_t static_value2 = 0x50b2feda44bddd06ULL;
};

template<class ContainerAllocator>
struct DataType< ::lodestone::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lodestone/State";
  }

  static const char* value(const ::lodestone::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lodestone::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 state_code\n"
"string state_name\n"
"\n"
"int8 status_code\n"
"string status_name\n"
"\n"
"string[] patients\n"
"bool[] free_gps\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lodestone::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lodestone::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state_code);
      stream.next(m.state_name);
      stream.next(m.status_code);
      stream.next(m.status_name);
      stream.next(m.patients);
      stream.next(m.free_gps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lodestone::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lodestone::State_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state_code);
    s << indent << "state_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state_name);
    s << indent << "status_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status_code);
    s << indent << "status_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status_name);
    s << indent << "patients[]" << std::endl;
    for (size_t i = 0; i < v.patients.size(); ++i)
    {
      s << indent << "  patients[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.patients[i]);
    }
    s << indent << "free_gps[]" << std::endl;
    for (size_t i = 0; i < v.free_gps.size(); ++i)
    {
      s << indent << "  free_gps[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.free_gps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LODESTONE_MESSAGE_STATE_H
